#include<iostream>
#include<queue>
#define MAX 101
using namespace std;
int N;
int high;
int cnt,mx;
int map[MAX][MAX];
bool check[MAX][MAX];
int xj[] = { 0,0,-1,1 }, yi[] = { -1,1,0,0 };
int yy, xx, Yn, Xn;
void dfs(int y,int x,int h) {
	queue<pair<int, int>> q;
	q.push({ y,x });
	while (!q.empty()) {
		yy = q.front().first; xx = q.front().second; q.pop();
		for (int i = 0; i < 4; i++) {
			Yn = yy + yi[i]; Xn = xx + xj[i];
			if (0<=Yn&&Yn<N && 0<=Xn&&Xn<N&& !check[Yn][Xn] && map[Yn][Xn] > h) {
				check[Yn][Xn] = true;
				q.push({ Yn,Xn });
			}
		}
	}
}
int main() {
	scanf("%d", &N);
	mx = 1;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			scanf("%d", &map[i][j]);
			if (high == 0)high = map[i][j];
			else if (high < map[i][j])high = map[i][j];
		}
	}
	for (int h = 1; h <= high; h++) {
		cnt = 0;
		for (int y = 0; y < N; y++)for (int x = 0; x < N; x++)check[y][x] = false;
		for (int y = 0; y < N; y++) {
			for (int x = 0; x < N; x++) {
				if (!check[y][x]&&map[y][x]>h) {
					cnt++;
					check[y][x] = true;
					dfs(y, x, h);
				}
			}
		}
		if (mx < cnt) { mx = cnt; }
	}
	printf("%d", mx);
	return 0;
}
