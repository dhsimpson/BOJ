#include<iostream>
#include<string>
#include<vector>
#include<queue>
#include<limits>
#define MAX 101
using namespace std;
int map[MAX][MAX];
int N, x, y, d, g;
vector<pair<int, int>> dragon;

pair<int, int> rotate(pair<int, int> first, pair<int, int> second, pair<int, int> start) {
	if (first.first - second.first == -1) { // 아래로가는 방향이었다면 왼쪽 가는 방향으로 붙어
		return { start.first,start.second - 1 };
	}
	else if (first.first - second.first == 1) { // 위로가는 방향이었다면 오른쪽 가는 방향으로 붙어
		return { start.first,start.second + 1 };
	}
	else if (first.second - second.second == -1) { // 오른쪽 가는 방향이었다면 아래 가는 방향으로 붙어
		return { start.first + 1,start.second };
	}
	else if (first.second - second.second == 1) { // 왼쪽 가는 방향이었다면 위로 가는 방향으로 붙어
		return { start.first - 1,start.second };
	}
	else {
		return{ -1,-1 };
	}
}
void dragonOnMap() {
	for (int i = 0; i < dragon.size(); i++) {
		map[dragon[i].first][dragon[i].second] = 1;
	}
}
void dragonCurve(int g) {
	if (g < 0) {
		dragonOnMap();
		return;
	}
	if (dragon.size() == 0) { // 일단 0 세대 만들기
		dragon.push_back({ y,x });
		if (d == 0) {
			dragon.push_back({ y,x + 1 });
			dragonCurve(g - 1);
		}
		else if (d == 1) {
			dragon.push_back({ y - 1,x });
			dragonCurve(g - 1);
		}
		else if (d == 2) {
			dragon.push_back({ y,x - 1 });
			dragonCurve(g - 1);
		}
		else if (d == 3) {
			dragon.push_back({ y + 1,x });
			dragonCurve(g - 1);
		}
	}
	else {
		pair<int, int > start, first, second;
		start.first = -1;
		int D = dragon.size();
		for (int i = D - 1; i >= 0; i--) {
			if (start.first == -1) {// 시작 점 초기화
				first.first = start.first = dragon[i].first; first.second = start.second = dragon[i].second;
				continue;
			}
			second.first = dragon[i].first; second.second = dragon[i].second;
			// first와 second를 확인한 후 회전시키기
			pair<int, int> temp = rotate(first, second, start);
			start = temp;
			dragon.push_back(temp);
			//cout << temp.first << " : " << temp.second << "\n";
			first.first = second.first; first.second = second.second;
		}
		dragonCurve(g - 1);
	}
	return;
}
int dragonSquare() {
	int cnt = 0;
	for (int i = 0; i < MAX - 1; i++) {
		for (int j = 0; j < MAX - 1; j++) {
			if (map[i][j] == 1 && map[i][j + 1] == 1 && map[i + 1][j] == 1 && map[i + 1][j + 1] == 1) {
				cnt++;
			}
		}
	}
	return cnt;
}
int main() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> x >> y >> d >> g;
		dragon.clear();
		dragonCurve(g);
	}
	cout << dragonSquare();
	return 0;
}
