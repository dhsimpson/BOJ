#include<iostream>
#include<string>
#include<vector>
#include<queue>
#include<limits>
using namespace std;
#define MAX 100
queue<pair<int, int>> snake; // pair<y좌표, x좌표> 뱀의 머리는 snake[0] 나머지 몸통은 사과 먹을 때 마다 push 
queue<pair<int, char>> snakeMove;
int map[MAX][MAX];
int N, K, L; // 맵크기, 사과수, 뱀 방향 변환수
int headY, headX;
int heading = 1; // 1 2 3 4 순으로 오른쪽 아랫쪽 왼쪽 위쪽
int time = 0;


void changeHeading(char moveDir) {// L 왼쪽 D 오른쪽
	if (moveDir == 'D') {
		if (heading == 4) heading = 1;
		else heading += 1;
	}
	else if (moveDir == 'L') {
		if (heading == 1) heading = 4;
		else heading -= 1;
	}
}
void refresh_snake() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] == 2) map[i][j] = 0;
		}
	}
}

int move(int time) {
	queue<pair<int, int>> tempSnake;
	int ptrY, ptrX;
	bool eat = false;
	ptrY = snake.front().first;
	ptrX = snake.front().second;

	if (heading == 1) { //우
		if (ptrX + 1 == N) return -1;
		if (map[ptrY][ptrX+1] == 2) return -1;
		if (map[ptrY][ptrX + 1] == 1) {
			K--; // 사과의 수를 줄임
			eat = true;
		}
		ptrX += 1;
	}
	else if (heading == 2) {//하
		if (ptrY + 1 == N) return -1;
		if (map[ptrY + 1][ptrX] == 2) return -1;
		if (map[ptrY + 1][ptrX] == 1) {
			K--; // 사과의 수를 줄임
			eat = true;
		}
		ptrY += 1;
	}
	else if (heading == 3) {//좌
		if (ptrX - 1 < 0) return -1;
		if (map[ptrY][ptrX-1] == 2) return -1;
		if (map[ptrY][ptrX - 1] == 1) {
			K--; // 사과의 수를 줄임
			eat = true;
		}
		ptrX -= 1;
	}
	else if (heading == 4) {//상
		if (ptrY - 1 < 0) return -1;
		if (map[ptrY - 1][ptrX] == 2) return -1;
		if (map[ptrY - 1][ptrX] == 1) {
			K--; // 사과의 수를 줄임
			eat = true;
		}
		ptrY -= 1;
	}

	while (!snake.empty()) {
		tempSnake.push({ ptrY, ptrX });
		ptrY = snake.front().first;
		ptrX = snake.front().second;
		snake.pop();
		if (snake.empty() && eat) { // 뱀이 사과를 먹었다면 꼬리를 늘리므로
			tempSnake.push({ ptrY, ptrX });
		}
	}
	refresh_snake();
	bool first = false;
	int headY;
	int headX;
	while (!tempSnake.empty()) {
		ptrY = tempSnake.front().first;
		ptrX = tempSnake.front().second;
		if (!first) {
			headY = ptrY, headX = ptrX;
			first = true;
		}
		else {// 헤드가 아닌 뱀의 좌표 중에 헤드 좌표와 같은 부분이 있다면 부딪힌 것이므로 종료
			if (headY == ptrY && headX == ptrX) return -1;
		}
		tempSnake.pop();
		snake.push({ ptrY,ptrX });
		map[ptrY][ptrX] = 2;
	}
	// 뱀이 자신의 몸에 부딪혔다면 게임 끝이므로
	return 1; //게임 끝나지 않았다면 1을 반환
}
int main() {
	cin >> N >> K;
	int appleY, appleX;
	for (int i = 0; i < K; i++) {
		cin >> appleY >> appleX;
		map[appleY-1][appleX-1] = 1; // 사과를 1로 표기한다.
	}
	cin >> L;
	int t;// 움직이기 시작하는 시간과 방향
	char dir;
	for (int i = 0; i < L; i++) {
		cin >> t >> dir;
		snakeMove.push({ t,dir });
	}
	map[0][0] = 2;//2는 뱀의 몸
	snake.push({ 0,0 });
	int moveTime = snakeMove.front().first;
	char moveDir = snakeMove.front().second;
	snakeMove.pop();
	while (true) {
		if (move(time++) == -1) break; // 게임이 끝났다면 반복문 종료
		//else if (K == 0) break; // 게임이 끝나지 않았으며 사과를 다 찾았다면 반복문 종료
		if (moveTime == time) { //게임 1회(move)가 끝난 후에 시간에 따라 방향 change
			changeHeading(moveDir);
			if (!snakeMove.empty()) {
				moveTime = snakeMove.front().first;
				moveDir = snakeMove.front().second;
				snakeMove.pop();
			}
		}
	}
	cout << time;
	return 0;
}
