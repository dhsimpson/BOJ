#include<iostream>
using namespace std;
int N, M, H;
int** map;
bool sadari() {
	for (int j = 1; j < N + 1; j++) {
		int temp = j;
		for (int i = 1; i < H + 1; i++) {
			if (map[i][temp] == 0) continue;
			else {
				temp = map[i][temp]; // map[i][temp] 에 써있던 세로줄 칸으로 이동합니다.
			}
		}
		if (temp != j) return false; // 하나라도 j to j 통과하지 못한다면 false를 반환
	}
	return true; // 모든 라인이 j to j 를 통과한다면 true를 반환
}
bool jo0() {
	return sadari();
}
bool jo1() {// 임의의 위치에 하나 놓은 뒤 sadari 수행
	for (int i = 1; i < H + 1; i++) {
		for (int j = 1; j < N; j++) { // 가로로는 끝까지 가면 안됨
			if (map[i][j] == 0 && map[i][j+1] == 0) {
				map[i][j + 1] = j;
				map[i][j] = j + 1;
				if (sadari()) return true;
				map[i][j + 1] = map[i][j] = 0; // 검사한 후 원상복구
			}
		}
	}
	return false;
}
bool jo2(int y,int x,int depth) {// 임의의 위치에 2개 놓은 뒤 sadari 수행
	for (int i = y; i < H + 1; i++) {
		for (int j = 1; j < N; j++) { // 가로로는 끝까지 가면 안됨
			if (map[i][j] == 0 && map[i][j + 1] == 0) {
				map[i][j + 1] = j;
				map[i][j] = j + 1;
				if (depth == 0) {
					if (jo2(i, j, depth + 1)) return true;
				}
				else if (depth == 1) {
					if (sadari()) return true;
				}
				map[i][j + 1] = map[i][j] = 0; // 검사한 후 원상복구
			}
		}
	}
	return false;
}
bool jo3(int y,int x,int depth) {// 임의의 위치에 3개 놓은 뒤 sadari 수행
	for (int i = y; i < H + 1; i++) {
		for (int j = 1; j < N; j++) { // 가로로는 끝까지 가면 안됨
			if (map[i][j] == 0 && map[i][j + 1] == 0) {
				map[i][j + 1] = j;
				map[i][j] = j + 1;
				if (depth == 0) {
					if (jo3(i, j, depth + 1)) return true;
				}
				else if (depth == 1) {
					if (jo3(i, j, depth + 1)) return true;
				}
				else if (depth == 2) {
					if (sadari()) return true;
				}
				map[i][j + 1] = map[i][j] = 0; // 검사한 후 원상복구
			}
		}
	}
	return false;
}
int jojak() {
	if (jo0()) return 0;
	else if (jo1()) return 1;
	else if (jo2(1,1,0)) return 2;
	else if (jo3(1,1,0)) return 3;
	return -1;
}
int main() {
	cin >> N >> M >> H;
	map = new int* [H + 1];
	for (int i = 0; i < H + 1; i++) {
		map[i] = new int[N + 1];
		fill(map[i], map[i] + N + 1, 0);
	}
	int a, b;
	for (int i = 0; i < M; i++) {
		cin >> a >> b;
		map[a][b] = b + 1;
		map[a][b + 1] = b;
	}
	cout << jojak();
	return 0;
}
