#include<iostream>
#include<math.h>
#include<string>
using namespace std;

// 수학적 규칙성을 찾아보자,
// 1광년 부터 시작해서
// 1 2 | 3 3 4 4 | 5 5 5 6 6 6 | 7 7 7 7 8 8 8 8 | ........ | k k k k ..... k k k k k+1 k+1 k+1 k+1 ..... k+1 k+1 k+1 k+1 | (단위 : 횟수)
// 위의 규칙을 갖는다.
// 백준에서 런타임 에러가 난다. 배열 크기를 동적으로 늘리면서 배열이 너무 커져 발생하는 경우이다.
int main() {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	int T, x, y;
	int max = 1001;
	int* travel = new int[max + 1]();
	int* check = new int[max + 1]();
	int count = 0;
	int term = 1;
	int endPoint = 0;
	cin >> T;

	
	for (int j = 0; j < T; j++) {
		cin >> x >> y;
		if (check[y-x] == 1) {
			cout << travel[y - x] << "\n";
		}
		else {
			while (1) {
				if (check[y - x] == 1){
					cout << travel[y - x]<<"\n";
					break;
				}
				else {
					if (endPoint + term * 2 > max) {
						int* temp = new int[max * 2 + 1]();
						int* ctemp = new int[max * 2 + 1]();
						copy(travel, travel + max, temp);
						travel = temp;
						copy(check, check + max, ctemp);
						check = ctemp;
						cout << travel[4] << "재할당 ! \n";
						cout << travel[1004] << "\n";
						max *= 2;
					}
					for (int i = endPoint + 1; i <= endPoint + term; i++) {
						travel[i] = count + 1;
						check[i] = 1;
					}
					for (int i = endPoint + 1 + term; i <= endPoint + term * 2; i++) {
						travel[i] = count + 2;
						check[i] = 1;
					}
					endPoint += term * 2;
					term += 1;
					count += 2;
					
				}
					
			}
			
		}
	}
	cout << "\n";
	for (int j = 0; j < 22; j++) {
		cout << travel[j] << "\n";
	}
	return 0;
}
