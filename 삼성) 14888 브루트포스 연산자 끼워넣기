#include<iostream>
#include<string>
#include<vector>
#include<queue>
#include<limits>
using namespace std;
#define MAX 1000000001
#define MIN -1000000001
#define plus 0
#define minus 1
#define mulitple 2
#define divide 3

long numbers[12];
int calArr[11];
int checkUse[11] = { 0 };
int N;
long minResult = MIN;
long maxResult = MAX;
void calculate(int depth,long semiSum) {
	if (depth == N) {
		if (minResult == MIN) minResult = semiSum;
		else maxResult = min(semiSum, maxResult);
		if (maxResult == MAX) maxResult = semiSum;
		else minResult = max(semiSum, minResult);
		return;
	}
	for (int i = 1; i < N; i++) {
		if (checkUse[i] == 0) {
			checkUse[i] = 1;
			if (calArr[i] == plus) calculate(depth + 1, semiSum + numbers[depth + 1]);
			else if (calArr[i] == minus) calculate(depth + 1, semiSum - numbers[depth + 1]);
			else if (calArr[i] == mulitple) calculate(depth + 1, semiSum * numbers[depth + 1]);
			else if (calArr[i] == divide) calculate(depth + 1, semiSum / numbers[depth + 1]);
			checkUse[i] = 0;
		}
	}
}
int main() {
	int temp, ptr;
	cin >> N;
	for (int i = 1; i <= N; i++) {
		cin >> numbers[i];
	}
	cin >> temp;
	ptr = temp;
	for (int i = 1; i < ptr+1; i++) {
		calArr[i] = plus;
	}
	cin >> temp;
	for (int i = ptr+1; i < ptr + temp+1; i++) {
		calArr[i] = minus;
	}
	ptr += temp;
	cin >> temp;
	for (int i = ptr+1; i < ptr + temp+1; i++) {
		calArr[i] = mulitple;
	}
	ptr += temp;
	cin >> temp;
	for (int i = ptr+1; i < ptr + temp+1; i++) {
		calArr[i] = divide;
	}
	ptr += temp;

	calculate(1,numbers[1]);
	cout << minResult << "\n" << maxResult;
	return 0;
}
