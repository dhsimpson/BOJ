#include<iostream>
#include<vector>
#include<queue>

using namespace std;


struct room {
	int x, y;
	bool wall;
};

int ri[4] = { -1,0,1,0 };
int cj[4] = { 0,1,0,-1 };
int cnt = 0;

void DFS(int** map,queue<pair<int,int>> virus,int r,int c,int N,int M) {
	int i, j;
	while (!virus.empty()) {
		i = virus.front().first;
		j = virus.front().second;
		virus.pop();
		for (int k = 0; k < 4; k++) {
			if (0 <= i + ri[k] && i + ri[k] < N && 0 <= j + cj[k] && j + cj[k] < M && map[i+ri[k]][j+cj[k]]==0) {
				map[i + ri[k]][j + cj[k]] = 2;
				virus.push({ i + ri[k],j + cj[k] });
			}
		}
	}
}
int count(int** map, int N, int M) {
	int result = 0;
	// 오염되지 않은 방의 수 세기
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] == 0) result++;
		}
	}
	return result;
}
void refreshMap(queue<pair<int,int>> virus,queue<pair<int,int>> save, int** map, int** refresh,int N,int M) {
	int r, c;
	queue<pair<int, int>> temp;
	while (!save.empty()) {
		r = save.front().first;
		c = save.front().second;
		save.pop();
		virus.push({ r,c });
		temp.push({ r,c });
	}
	save = temp;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			map[i][j] = refresh[i][j];
		}
	}
}
int main() {
	int N, M;
	cin >> N >> M;
	int** map = new int* [N];
	int** refresh = new int* [N];
	for (int i = 0; i < N; i++) {
		map[i] = new int[M];
		refresh[i] = new int[M];
	}
	int temp;
	vector<room> space; // 빈 방(0) 의 좌표,벽 세움 여부를 저장하는 room 원소를 저장하는 벡터
	queue<pair<int, int>> virus, save;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> temp;
			map[i][j] = temp;
			refresh[i][j] = temp;
			if (temp == 0) {
				room r = { i,j,false };
				space.push_back(r);
			}
			else if (temp == 2) {
				virus.push({ i,j });
				save.push({ i,j });
			}
		}
	}
	for (int i = 0; i < space.size(); i++) {
		space[i].wall = true;
		for (int j = 0; j < space.size(); j++) {
			if (!space[j].wall)
				space[j].wall = true;
			else continue;
			for (int k = 0; k < space.size(); k++) {
				if (!space[k].wall)
					space[k].wall = true;
				else continue;
				map[space[i].x][space[i].y] = 1;
				map[space[j].x][space[j].y] = 1;
				map[space[k].x][space[k].y] = 1;
				DFS(map,virus,-1,-1,N,M);
				temp = count(map,N,M);
				if (cnt < temp) cnt = temp;
				space[k].wall = false;
				refreshMap(virus, save, map, refresh, N, M);
			}
			space[j].wall = false;
		}
		space[i].wall = false;
	}
	cout << cnt;
	return 0;
}
