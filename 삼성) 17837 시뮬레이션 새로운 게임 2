#include<iostream>
#include<vector>
using namespace std;
#define MAXN 13
#define MAXC 11
struct pon {
	int ponNum, i, j, dir;
};
int N, K;
int map[MAXN][MAXN] = { 2, };
vector<int> ponMap[MAXN][MAXN];
int time = 0;
pon chess[MAXC];
int xj[5] = { 0, 1,-1,0,0 };
int yi[5] = { 0, 0,0,-1,1 };
bool End = false;

void white(int num,int dir){
	int i = chess[num].i; int j = chess[num].j;
	bool toggle = false;
	vector<int> tempCur;
	for (int t = 0; t < ponMap[i][j].size(); t++) {
		if (!toggle) {
			if (ponMap[i][j][t] == num) {
				chess[num].i += yi[dir]; chess[num].j += xj[dir];
				ponMap[i + yi[dir]][j + xj[dir]].push_back(ponMap[i][j][t]);
				toggle = true;
			}
			else {
				tempCur.push_back(ponMap[i][j][t]);
			}
		}
		else {
			chess[ponMap[i][j][t]].i += yi[dir]; chess[ponMap[i][j][t]].j += xj[dir];
			ponMap[i + yi[dir]][j + xj[dir]].push_back(ponMap[i][j][t]);
		}
	}
	ponMap[i][j] = tempCur;
	if (ponMap[i + yi[dir]][j + xj[dir]].size() >= 4)End = true;
}
void red(int num,int dir) {
	int i = chess[num].i; int j = chess[num].j;
	int flag = 0;
	vector<int> tempCur;
	for (int t = ponMap[i][j].size()-1; t>=0; t--) {
		chess[ponMap[i][j][t]].i += yi[dir];
		chess[ponMap[i][j][t]].j += xj[dir];
		ponMap[i + yi[dir]][j + xj[dir]].push_back(ponMap[i][j][t]);
		if (ponMap[i][j][t] == num) {
			flag = t; break;
		} 
	}
	for (int t = 0; t < flag; t++) {
		tempCur.push_back(ponMap[i][j][t]);
	}
	ponMap[i][j] = tempCur;
	if (ponMap[i + yi[dir]][j + xj[dir]].size() >= 4) End = true;
}
void blue(int num, int dir) {
	int i = chess[num].i; int j = chess[num].j;
	if (dir == 1) { dir = chess[num].dir = 2; }
	else if (dir == 2) { dir = chess[num].dir = 1; }
	else if (dir == 3) { dir = chess[num].dir = 4; }
	else if (dir == 4) { dir = chess[num].dir = 3; }
	if (map[i + yi[dir]][j + xj[dir]] == 0) { white(num, dir); }
	else if (map[i + yi[dir]][j + xj[dir]] == 1) { red(num, dir); }
}
void doChess(int num) {
	if (chess[num].dir == 1) {
		if (chess[num].j == N || map[chess[num].i][chess[num].j+1]==2) {
			blue(num, chess[num].dir);
		}
		else if(map[chess[num].i][chess[num].j+1]==1){
			red(num, chess[num].dir);
		}
		else if (map[chess[num].i][chess[num].j+1] == 0) {
			white(num, chess[num].dir);
		}
	}
	else if (chess[num].dir == 2) {
		if (chess[num].j == 1 || map[chess[num].i][chess[num].j-1] == 2) {
			blue(num, chess[num].dir);
		}
		else if (map[chess[num].i][chess[num].j-1] == 1) {
			red(num, chess[num].dir);
		}
		else if (map[chess[num].i][chess[num].j-1] == 0) {
			white(num, chess[num].dir);
		}
	}
	else if (chess[num].dir == 3) {
		if (chess[num].i == 1 || map[chess[num].i-1][chess[num].j] == 2) {
			blue(num, chess[num].dir);
		}
		else if (map[chess[num].i-1][chess[num].j] == 1) {
			red(num, chess[num].dir);
		}
		else if (map[chess[num].i-1][chess[num].j] == 0) {
			white(num, chess[num].dir);
		}
	}
	else if (chess[num].dir == 4) {
		if (chess[num].i == N || map[chess[num].i+1][chess[num].j] == 2) {
			blue(num, chess[num].dir);
		}
		else if (map[chess[num].i+1][chess[num].j] == 1) {
			red(num, chess[num].dir);
		}
		else if (map[chess[num].i+1][chess[num].j] == 0) {
			white(num, chess[num].dir);
		}
	}
}
int main() { 
	cin >> N >> K;
	for (int i = 0; i < MAXN; i++) {
		for (int j = 0; j < MAXN; j++) {
			map[i][j] = 2;
		}
	}
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	} 
	for (int i = 1; i <= K; i++) {
		pon t;
		cin >> t.i >> t.j >> t.dir;
		t.ponNum = i;
		chess[i] = t;
		ponMap[t.i][t.j].push_back(i);
	}
	while (time<=1000) {
		for (int num = 1; num <= K; num++) {
			doChess(num);
			if (End) {
				cout << time + 1;
				return 0;
			}
		}
		time++;
	}
	cout << -1;
	return 0;
}
