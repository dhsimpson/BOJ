#include<iostream>
using namespace std;
#define MAX 21
#define INF 987654321
int map[MAX][MAX];
int checkMap[MAX][MAX];
int N;
int res = INF;
void refresh() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			checkMap[i][j] = 0;
		}
	}
}
bool check(int x, int y, int d1, int d2) {
	if (1 <= x && x < x + d1 + d2 && x + d1 + d2 <= N && 1 <= y - d1 && y - d1 <= y && y <= y + d2 && y + d2 <= N)return true;
	return false;
}
void geryMendoring(int x, int y, int d1, int d2) {
	int sum[6] = { 0, };
	int x1 = x; int y1 = y; // 윗 꼭지
	int x2 = x + d1; int y2 = y - d1; // 왼 꼭지
	int x3 = x + d2; int y3 = y + d2; //오른 꼭지
	int x4 = x + d1 + d2; int y4 = y - d1 + d2; //아랫 꼭지
	for (int d = 0; d <= d1; d++) {
		if (checkMap[x1 + d][y1 - d] == 0) {
			checkMap[x1 + d][y1 - d] = 5;
			sum[5] += map[x1 + d][y1 - d];
		}
	}
	for (int d = 0; d <= d2; d++) {
		if (checkMap[x1 + d][y1 + d] == 0) {
			checkMap[x1 + d][y1 + d] = 5;
			sum[5] += map[x1 + d][y1 + d];
		}
	}
	for (int d = 0; d <= d2; d++) {
		if (checkMap[x2 + d][y2 + d]==0) {
			checkMap[x2 + d][y2 + d] = 5;
			sum[5] += map[x2 + d][y2 + d];
		}
	}
	for (int d = 0; d <= d1; d++) {
		if (checkMap[x3 + d][y3 - d] == 0) {
			checkMap[x3 + d][y3 - d] = 5;
			sum[5] += map[x3 + d][y3 - d];
		}
	}

	//왼쪽 처리
	for (int j = 1; j < y2; j++) {
		for (int i = 1; i <= N; i++) {
			if (i < x2) {
				sum[1] += map[i][j];
				checkMap[i][j] = 1;
			} 
			else {
				sum[3] += map[i][j];
				checkMap[i][j] = 3;
			}
		}
	}
	//위쪽 처리
	for (int j = y2; j <= y1; j++) {
		for (int i = 1; i <= N; i++) {
			if (checkMap[i][j]==0) {
				sum[1] += map[i][j];
				checkMap[i][j] = 1;
			}
			else if (checkMap[i][j] == 5)break;
		}
	}

	for (int j = y1 + 1; j <= y3; j++) {
		for (int i = 1; i <= N; i++) {
			if (checkMap[i][j] == 0) {
				sum[2] += map[i][j];
				checkMap[i][j] = 2;
			}
			else if (checkMap[i][j] == 5)break;
		}
	}
	// 아래쪽 처리
	for (int j = y2; j < y4; j++) {
		for (int i = N; i >= 1; i--) {
			if (checkMap[i][j] == 0) {
				checkMap[i][j] = 3;
				sum[3] += map[i][j];
			}
			else if (checkMap[i][j] == 5)break;
		}
	}
	for (int j = y4; j <= y3; j++) {
		for (int i = N; i >= 1; i--) {
			if (checkMap[i][j] == 0) {
				checkMap[i][j] = 4;
				sum[4] += map[i][j];
			}
			else if (checkMap[i][j] == 5)break;
		}
	}


	// 오른쪽 처리
	for (int j = y3 + 1; j <= N; j++) {
		for (int i = 1; i <= N; i++) {
			if (i <= x3) {
				sum[2] += map[i][j];
				checkMap[i][j] = 2;
			}
			else {
				sum[4] += map[i][j];
				checkMap[i][j] = 4;
			}
		}
	}
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (checkMap[i][j] == 0) {
				checkMap[i][j] = 5;
				sum[5] += map[i][j];
			}
		}
	}
	int smin, smax;
	smin = smax = sum[1];
	for (int i = 2; i <= 5; i++) {
		if (smin > sum[i])smin = sum[i];
		if (smax < sum[i])smax = sum[i];
	}
	res = min(res, smax - smin);
}
int main() {
	cin >> N;
	for (int i = 1; i <= N; i++)for (int j = 1; j <= N; j++)cin >> map[i][j];
	for (int x = 1; x <= N; x++) {
		for (int y = 1; y <= N; y++) {
			for (int d1 = 1; d1 <= N; d1++) {
				for (int d2 = 1; d2 <= N; d2++) {
					if (check(x, y, d1, d2)) {
						refresh();
						geryMendoring(x, y, d1, d2);
					}
				}
			}
		}
	}
	cout << res;
	return 0;
}
